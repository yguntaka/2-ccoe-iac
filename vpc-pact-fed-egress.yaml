AWSTemplateFormatVersion: 2010-09-09
Description: Provides networking configuration for a standard, public facing application,
  separates private-public subnets and enforces traffic with NACL rules (qs-1nb14cqcl)
#PreProd
Metadata:
  Stack:
    Value: 2
  VersionDate:
    Value: 20160510
  Identifier:
    Value: template-vpc
  Input:
    Description: CIDR blocks, VPC name
  Output:
    Description: Outputs ID of all deployed resources
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Region Config
      Parameters:
      - pRegionAZ1Name
      - pRegionAZ2Name
    - Label:
        default: VPC Config
      Parameters:
      - pVPCName
      - pCIDR
      - pEgressPublicSubnet1CIDR
      - pEgressPublicSubnet2CIDR
      - pEgressPrivateSubnet1CIDR
      - pEgressPrivateSubnet2CIDR
      - pEgressPrivateSubnet3CIDR
      - pEgressPrivateSubnet4CIDR
      - pVPCTenancy
    ParameterLabels:
      pVPCName:
        default: Name of VPC
      pCIDR:
        default: VPC CIDR block
      pEgressPublicSubnet1CIDR:
        default: CIDR block of pEgressPublicSubnet1CIDR
      pEgressPublicSubnet2CIDR:
        default: CIDR block of pEgressPublicSubnet2CIDR
      pEgressPrivateSubnet1CIDR:
        default: CIDR block of pEgressPrivateSubnet1CIDR
      pEgressPrivateSubnet2CIDR:
        default: CIDR block of pEgressPrivateSubnet2CIDR
      pEgressPrivateSubnet3CIDR:
        default: CIDR block of pEgressPrivateSubnet3CIDR
      pEgressPrivateSubnet4CIDR:
        default: CIDR block of pEgressPrivateSubnet4CIDR
      pVPCTenancy:
        default: Instance tenancy
Parameters:
  pProduct:
    Type: String
    Description: Product Name
    Default: ""
  pRegionAZ1Name:
    Description: Availability Zone 1 Name in Region
    Type: AWS::EC2::AvailabilityZone::Name
  pRegionAZ2Name:
    Description: Availability Zone 2 Name in Region
    Type: AWS::EC2::AvailabilityZone::Name
  pVPCName:
    Description: VPC Name
    Type: String
    Default: CommandCentral
  pCIDR:
    Description: CIDR block for VPC
    Type: String
    Default: 10.100.0.0/16
  pEgressPublicSubnet1CIDR:
    Description: CIDR block of pEgressPublicSubnet1CIDR
    Type: String
    Default: 10.100.10.0/24
  pEgressPublicSubnet2CIDR:
    Description: CIDR block of pEgressPublicSubnet2CIDR
    Type: String
    Default: 10.100.20.0/24
  pEgressPrivateSubnet1CIDR:
    Description: CIDR block of pEgressPrivateSubnet1CIDR
    Type: String
    Default: 10.100.30.0/24
  pEgressPrivateSubnet2CIDR:
    Description: CIDR block of pEgressPrivateSubnet2CIDR
    Type: String
    Default: 10.100.40.0/24
  pEgressPrivateSubnet3CIDR:
    Description: CIDR block of pEgressPrivateSubnet3CIDR
    Type: String
    Default: 10.100.30.0/24
  pEgressPrivateSubnet4CIDR:
    Description: CIDR block of pEgressPrivateSubnet4CIDR
    Type: String
    Default: 10.100.40.0/24    
  pVPCTenancy:
    Description: Instance tenancy behavior for this VPC
    Type: String
    Default: default
    AllowedValues:
    - default
    - dedicated
  pFlowLogGroup:
    Description: Log Group for capturing VPC Flow Logs
    Type: String
    Default: ''

Conditions:
  cEnableFlowLogs:
    !Not
    - !Equals
      - !Ref pFlowLogGroup
      - ''
    
Resources:
  # -----------------
  # VPC and Subnets
  # -----------------
  rVpcFedEgress:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pCIDR
      InstanceTenancy: !Ref pVPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref pVPCName
  rSnFedEgressPub1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pEgressPublicSubnet1CIDR
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-sn-egress-pub-1
  rSnFedEgressPub2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pEgressPublicSubnet2CIDR
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-sn-egress-pub-2
  rSnFedEgressPvt1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pEgressPrivateSubnet1CIDR
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-sn-egress-pvt-1
  rSnFedEgressPvt2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pEgressPrivateSubnet2CIDR
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-sn-egress-pvt-2
  rSnFedEgressPvt3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pEgressPrivateSubnet3CIDR
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-sn-egress-pvt-3
  rSnFedEgressPvt4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pEgressPrivateSubnet4CIDR
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-sn-egress-pvt-4
  
  # -----------------
  # Internet Gateway
  # -----------------
  rIgwFedEgress:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: pact-net-igw-egress-use1
  rAttachmentIgwFedEgress:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rVpcFedEgress
      InternetGatewayId: !Ref rIgwFedEgress

  # -----------------
  # NAT Gateways
  # -----------------
  rEipFedEgressNatgw1:
    Type: AWS::EC2::EIP
    DependsOn: rAttachmentIgwFedEgress
    Properties:
      Domain: vpc
  rNatgw1FedEgress:
    Type: AWS::EC2::NatGateway
    DependsOn: rAttachmentIgwFedEgress
    Properties:
      AllocationId: !GetAtt rEipFedEgressNatgw1.AllocationId
      SubnetId: !Ref rSnFedEgressPub1
      Tags:
      - Key: Name
        Value: pact-net-natgw1-egress
  rEipFedEgressNatgw2:
    Type: AWS::EC2::EIP
    DependsOn: rAttachmentIgwFedEgress
    Properties:
      Domain: vpc
  rNatgw2FedEgress :
    Type: AWS::EC2::NatGateway
    DependsOn: rAttachmentIgwFedEgress
    Properties:
      AllocationId: !GetAtt rEipFedEgressNatgw2.AllocationId
      SubnetId: !Ref rSnFedEgressPub2
      Tags:
      - Key: Name
        Value: pact-net-natgw2-egress

  # -----------------
  # Route Tables
  # -----------------
  rRtVpcFedEgress:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: Main Routing Table for this VPC
  rRtSnFedEgressPub:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-rt-sn-egress-pub
  rRtSnFedEgressPvt1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-rt-sn-egress-pvt-1
  rRtSnFedEgressPvt2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-rt-sn-egress-pvt-2
  rRtSnFedEgressPvt3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-rt-sn-egress-pvt-3
  rRtSnFedEgressPvt4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpcFedEgress
      Tags:
      - Key: Name
        Value: pact-net-rt-sn-egress-pvt-4
  rRtaSnFedEgressPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRtSnFedEgressPub
      SubnetId: !Ref rSnFedEgressPub1
  rRtaSnFedEgressPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRtSnFedEgressPub
      SubnetId: !Ref rSnFedEgressPub2
  rRtaSnFedEgressPvt1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRtSnFedEgressPvt1
      SubnetId: !Ref rSnFedEgressPvt1
  rRtaSnFedEgressPvt2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRtSnFedEgressPvt2
      SubnetId: !Ref rSnFedEgressPvt2
  rRtaSnFedEgressPvt3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRtSnFedEgressPvt3
      SubnetId: !Ref rSnFedEgressPvt3
  rRtaSnFedEgressPvt4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRtSnFedEgressPvt4
      SubnetId: !Ref rSnFedEgressPvt4
 
  # -----------------
  # Public Routes
  # -----------------
  rRouteIgwFedEgress:
    Type: AWS::EC2::Route
    DependsOn: rAttachmentIgwFedEgress
    Properties:
      RouteTableId: !Ref rRtSnFedEgressPub
      GatewayId: !Ref rIgwFedEgress
      DestinationCidrBlock: 0.0.0.0/0


  # -------------------------
  # Private Routes to NAT GWs
  # -------------------------
  rRouteNatgw1SnFedEgressPvt1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rRtSnFedEgressPvt1
      NatGatewayId: !Ref rNatgw1FedEgress
  rRouteNatgw2SnFedEgressPvt2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rRtSnFedEgressPvt2
      NatGatewayId: !Ref rNatgw2FedEgress
  rRouteNatgw1SnFedEgressPvt3:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rRtSnFedEgressPvt3
      NatGatewayId: !Ref rNatgw1FedEgress
  rRouteNatgw2SnFedEgressPvt4:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rRtSnFedEgressPvt4
      NatGatewayId: !Ref rNatgw2FedEgress
  # -------------------------
  # Private Routes to TGW
  # Need to add after TGW pipeline setup
  # -------------------------

  # -----------------
  # NACLs
  # -----------------
#  rNACLPublic:
#    Type: AWS::EC2::NetworkAcl
#    Properties:
#      VpcId: !Ref rVpcFedEgress
#  rNACLPrivate:
#    Type: AWS::EC2::NetworkAcl
#    Properties:
#      VpcId: !Ref rVpcFedEgress
# # #
#  rNACLAssocAppPrivSubnetA:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPrivate
#      SubnetId: !Ref rAppPrivateSubnetA
#  rNACLAssocAppPrivSubnetB:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPrivate
#      SubnetId: !Ref rAppPrivateSubnetB
#  rNACLAssocAppPrivSubnetC:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPrivate
#      SubnetId: !Ref rAppPrivateSubnetC
#  rNACLAssocPublicPubSubnetA:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPublic
#      SubnetId: !Ref rPublicSubnetA
#  rNACLAssocPublicPubSubnetB:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPublic
#      SubnetId: !Ref rPublicSubnetB
#  rNACLAssocPublicPubSubnetC:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPublic
#      SubnetId: !Ref rPublicSubnetC
#  rNACLAssocDBPrivSubnetA:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPrivate
#      SubnetId: !Ref rDBPrivateSubnetA
#  rNACLAssocDBPrivSubnetB:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPrivate
#      SubnetId: !Ref rDBPrivateSubnetB
#  rNACLAssocDBPrivSubnetC:
#    Type: AWS::EC2::SubnetNetworkAclAssociation
#    Properties:
#      NetworkAclId: !Ref rNACLPrivate
#      SubnetId: !Ref rDBPrivateSubnetC

  # -----------------
  # NACL Rules
  # -----------------
#  rNACLRuleAllowAllTCPInternal:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: !Ref pCIDR
#      Protocol: 6
#      PortRange:
#        From: 1
#        To: 65535
#      RuleAction: allow
#      RuleNumber: 120
#      NetworkAclId: !Ref rNACLPrivate
#  rNACLRuleAllowBastionSSHAccessPrivate:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 22
#        To: 22
#      RuleAction: allow
#      RuleNumber: 130
#      NetworkAclId: !Ref rNACLPrivate
#  rNACLRuleAllowMgmtAccessSSHtoPrivate:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: !Ref pManagementCIDR
#      Protocol: 6
#      PortRange:
#        From: 22
#        To: 22
#      RuleAction: allow
#      RuleNumber: 125
#      NetworkAclId: !Ref rNACLPrivate
#  rNACLRuleAllowReturnTCPPriv:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 1024
#        To: 65535
#      RuleAction: allow
#      RuleNumber: 140
#      NetworkAclId: !Ref rNACLPrivate
#  rNACLRuleAllowALLfromPrivEgress:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Egress: true
#      Protocol: 6
#      PortRange:
#        From: 1
#        To: 65535
#      RuleAction: allow
#      RuleNumber: 120
#      NetworkAclId: !Ref rNACLPrivate
#  rNACLRuleAllowAllTCPInternalEgress:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Egress: true
#      Protocol: 6
#      PortRange:
#        From: 1
#        To: 65535
#      RuleAction: allow
#      RuleNumber: 100
#      NetworkAclId: !Ref rNACLPrivate
#  rNACLRuleAllowALLEgressPublic:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Egress: true
#      Protocol: 6
#      PortRange:
#        From: 1
#        To: 65535
#      RuleAction: allow
#      RuleNumber: 100
#      NetworkAclId: !Ref rNACLPublic
#  rNACLRuleAllowAllReturnTCP:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 1024
#        To: 65535
#      RuleAction: allow
#      RuleNumber: 140
#      NetworkAclId: !Ref rNACLPublic
#  rNACLRuleAllowHTTP:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: !Ref pCIDR
#      Protocol: 6
#      PortRange:
#        From: 80
#        To: 80
#      RuleAction: allow
#      RuleNumber: 200
#      NetworkAclId: !Ref rNACLPublic
#  rNACLRuleAllowBastionSSHAccessPublic:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 22
#        To: 22
#      RuleAction: allow
#      RuleNumber: 210
#      NetworkAclId: !Ref rNACLPublic
#  rNACLRuleAllowEgressReturnTCP:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Egress: true
#      Protocol: 6
#      PortRange:
#        From: 1024
#        To: 65535
#      RuleAction: allow
#      RuleNumber: 140
#      NetworkAclId: !Ref rNACLPublic
#  rNACLRuleAllowHTTPSPublic:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Protocol: 6
#      PortRange:
#        From: 443
#        To: 443
#      RuleAction: allow
#      RuleNumber: 100
#      NetworkAclId: !Ref rNACLPublic

# -----------------
# FlowLogs
# -----------------
  # rVpcFedEgressFlowLogsServiceRole:
  #   Condition: cEnableFlowLogs
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #       - Sid: AllowFlowLogs
  #         Effect: Allow
  #         Principal:
  #           Service: vpc-flow-logs.amazonaws.com
  #         Action: sts:AssumeRole
  #     Path: /
  #     Policies:
  #     - PolicyName: !Sub ${pProduct}-cloudwatchlogsrole
  #       PolicyDocument:
  #         Version: 2012-10-17
  #         Statement:
  #         - Action:
  #           - logs:CreateLogGroup
  #           - logs:CreateLogStream
  #           - logs:PutLogEvents
  #           - logs:DescribeLogGroups
  #           - logs:DescribeLogStreams
  #           Effect: Allow
  #           Resource: '*'

  # rLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub ${pProduct}-${pFlowLogGroup}

  # rVpcFedEgressFlowLog:
  #   Condition: cEnableFlowLogs
  #   DependsOn:
  #     - rVpcFedEgressFlowLogsServiceRole
  #     - rLogGroup
  #   Type: AWS::EC2::FlowLog
  #   Properties:
  #     DeliverLogsPermissionArn: !GetAtt rVpcFedEgressFlowLogsServiceRole.Arn
  #     LogGroupName: !Sub ${pProduct}-${pFlowLogGroup}
  #     ResourceId: !Ref rVpcFedEgress
  #     ResourceType: VPC
  #     TrafficType: ALL

  # rVpcFedEgressFlowLogStream:
  #   Condition: cEnableFlowLogs
  #   DependsOn: rVpcFedEgressFlowLog
  #   Type: AWS::Logs::LogStream
  #   Properties:
  #     LogGroupName: !Sub ${pProduct}-${pFlowLogGroup}

Outputs:
  oVpcFedEgress:
    Value: !Ref rVpcFedEgress
  oSnFedEgressPub1:
    Value: !Ref rSnFedEgressPub1
  oSnFedEgressPub2:
    Value: !Ref rSnFedEgressPub2
  oSnFedEgressPvt1:
    Value: !Ref rSnFedEgressPvt1
  oSnFedEgressPvt2:
    Value: !Ref rSnFedEgressPvt2
  oSnFedEgressPvt3:
    Value: !Ref rSnFedEgressPvt3
  oSnFedEgressPvt4:
    Value: !Ref rSnFedEgressPvt4